<?php

/**
 * @file
 * Provides a views style plugin for FullCalendar
 */

/**
 * The default path to the FullCalendar plugin.
 */
define('FULLCALENDAR_PATH', 'sites/all/libraries/fullcalendar');

/**
 * The minimum supported version of the FullCalendar plugin.
 */
define('FULLCALENDAR_MIN_PLUGIN_VERSION', '1.4.10');

/**
 * The recommended version of the FullCalendar plugin.
 */
define('FULLCALENDAR_RECOMMENDED_PLUGIN_VERSION', '1.5.1');

/**
 * Implements hook_views_api().
 */
function fullcalendar_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'fullcalendar') . '/includes/views',
  );
}

/**
 * Implements hook_theme().
 */
function fullcalendar_theme($existing, $type, $theme, $path) {
  return array(
    'fullcalendar_event' => array(
      'variables' => array(
        'event' => NULL,
        'entity' => NULL,
      ),
      'file' => 'theme.inc',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_library().
 */
function fullcalendar_library() {
  $path = variable_get('fullcalendar_path', FULLCALENDAR_PATH);
  $libraries['fullcalendar'] = array(
    'title' => 'FullCalendar',
    'website' => 'http://arshaw.com/fullcalendar',
    'version' => FULLCALENDAR_MIN_PLUGIN_VERSION,
    'js' => array(
      fullcalendar_get_js_path() => array(),
      $path . '/gcal.js' => array(),
    ),
    'css' => array(
      $path . '/fullcalendar.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'ui.draggable'),
      array('system', 'ui.droppable'),
      array('system', 'ui.resizable'),
      array('system', 'effects.highlight'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_permission().
 *
 * @return
 *   An array of valid permissions for the FullCalendar module.
 */
function fullcalendar_permission() {
  return array(
    'update any fullcalendar event' => array(
      'title' => t('Update any FullCalendar event'),
      'description' => t('Allow user to edit events, ignoring other permissions.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @return
 *   An array of menu items.
 */
function fullcalendar_menu() {
  $items = array();

  $items['admin/config/user-interface/fullcalendar'] = array(
    'title' => 'FullCalendar',
    'description' => 'Adjust FullCalendar settings.',
    'file' => 'fullcalendar.admin.inc',
    'file path' => drupal_get_path('module', 'fullcalendar') . '/includes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fullcalendar_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  $items['admin/config/user-interface/fullcalendar/default'] = array(
    'title' => 'FullCalendar',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['fullcalendar/ajax/update/%/%'] = array(
    'title' => 'Update event',
    'description' => 'Save the updated event datetime.',
    'page callback' => 'fullcalendar_update',
    'page arguments' => array(3, 4),
    'access callback' => '_fullcalendar_update_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
  );
  $items['fullcalendar/ajax/results'] = array(
    'title' => 'Events',
    'description' => 'Get events from views with arguments',
    'page callback' => 'fullcalendar_results',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Saves the updated FullCalendar event's datetime.
 *
 * @param $action
 *   Value can be 'drop' or 'resize'.
 * @param $eid
 *   The id of the entity that will be updated.
 */
function fullcalendar_update($action, $eid) {
  // Retrieve the post vars form the ajax call.
  $field = $_POST['field'];
  $index = $_POST['index'];

  if (empty($field) || !isset($index)) {
    return;
  }

  $all_day = isset($_POST['all_day']) ? $_POST['all_day'] : '';
  $delta = ' ' . $_POST['day_delta'] . ' days ' . $_POST['minute_delta'] . ' minutes';
  $entity_type = $_POST['entity_type'];
  $entity = entity_load($entity_type, array($eid));
  $entity = reset($entity);

  $langcode = field_language($entity_type, $entity, $field);
  $item = &$entity->{$field}[$langcode][$index];
  $old_start = $item['value'];
  $old_end = $item['value2'];

  // Adjust for different date formats.
  $format = date_type_format($item['date_type']);

  // Datestamp can't combine with words for strtotime, convert to ISO for now.
  if ($format == DATE_FORMAT_UNIX) {
    $old_start = date(DATE_FORMAT_ISO, $old_start);
    $old_end = date(DATE_FORMAT_ISO, $old_end);
  }

  // No break after 'drop' so it will reuse the code of 'resize'.
  switch ($action) {
    case 'drop':
      $item['value'] = date($format, strtotime($old_start . $delta));
    case 'resize':
      $item['value2'] = date($format, strtotime($old_end . $delta));
      break;
  }

  // Save the new start/end values.
  field_attach_update($entity_type, $entity);

  drupal_json_output(array('msg' => t('The new event time has been saved.') . ' [' . l(t('Close'), NULL, array('attributes' => array('class' => array('fullcalendar-status-close')))) . ']', 'dom_id' => $_POST['dom_id']));
}

/**
 * Implements hook_fullcalendar_classes().
 */
function fullcalendar_fullcalendar_classes($entity) {
  $classes = array(
    'fc-event-default',
    $entity->bundle,
  );
  return $classes;
}

/**
 * Process the view and add the relevant CSS and JS.
 *
 * @param $view
 *   The view object.
 */
function fullcalendar_get_settings($view) {
  // If this style plugin isn't ours, return.
  // @todo Debug why this would occur.
  if (!($view->style_plugin instanceof fullcalendar_plugin_style_fullcalendar)) {
    return;
  }

  // Bail out if we're getting results from ajax callback.
  if (isset($view->fullcalendar_ajax)) {
    return;
  }

  global $language;

  $options = $view->style_plugin->options;
  static $fc_dom_id = 1;
  if (empty($view->dom_id)) {
    $view->dom_id = 'fc-' . $fc_dom_id++;
  }
  $dom_id = '.view-dom-id-' . $view->dom_id;

  $options['gcal'] = array();
  foreach ($view->field as $field) {
    if ($field->field == 'gcal') {
      $options['gcal'][] = $field->render(array());
    }
  }

  // Remove times from $options so they can be set conditionally later.
  $times = $options['times'];
  unset($options['times']);
  unset($options['fields']);

  $settings = array(
    $dom_id => $options + array(
      'monthNames' => array_values(date_month_names(TRUE)),
      'monthNamesShort' => array_values(date_month_names_abbr(TRUE)),
      'dayNames' => date_week_days(TRUE),
      'dayNamesShort' => date_week_days_abbr(TRUE),
      'allDayText' => t('All day'),
      'dayString' => t('Day'),
      'weekString' => t('Week'),
      'monthString' => t('Month'),
      'todayString' => t('Today'),
      'isRTL' => $language->direction,
      'view_name' => $view->name,
      'view_display' => $view->current_display,
    ),
  );

  if ($times['default_date']) {
    $settings[$dom_id]['year'] = $times['date']['year'];
    $settings[$dom_id]['month'] = $times['date']['month'];
    $settings[$dom_id]['day'] = $times['date']['day'];
  }

  extract($view->get_exposed_input(), EXTR_SKIP);
  if (isset($year) && is_numeric($year)) {
    $settings[$dom_id]['year'] = $year;
  }
  if (isset($month) && is_numeric($month) && $month > 0 && $month <= 12) {
    $settings[$dom_id]['month'] = $month;
  }
  if (isset($day) && is_numeric($day) && $day > 0 && $day <= 31) {
    $settings[$dom_id]['day'] = $day;
  }
  if (isset($mode) && in_array($mode, array('month', 'basicWeek', 'basicDay', 'agendaWeek', 'agendaDay'))) {
    $settings[$dom_id]['defaultView'] = $mode;
  }

  // Check if there is an argument which is an instance the default
  // date argument class and create month , year variables as well as next
  // and previous urls from all arguments.
  if (!empty($view->argument) && $view->use_ajax) {
    $extra = fullcalendar_check_arguments($view);
    if (!empty($extra)) {
      $settings[$dom_id] += $extra;
    }
  }

  drupal_add_library('fullcalendar', 'fullcalendar');
  drupal_add_js(array('fullcalendar' => $settings), 'setting');
  ctools_add_css('fullcalendar.theme', 'fullcalendar');
  ctools_add_js('fullcalendar.views', 'fullcalendar');
}

/**
 * Check arguments on a view. If a date handler is found, add more
 * info to the $settings array so we know in jQuery we can fetch
 * new data from the view.
 *
 * @param $view
 *   The current view we're processing.
 *
 * @return $settings
 *   A collection of extra settings.
 */
function fullcalendar_check_arguments($view) {
  $date_handler = NULL;
  $args = array();
  $settings = array('ajax' => FALSE);

  $position = 0;
  foreach ($view->argument as $argument_key => $handler) {
    if (date_views_handler_is_date($handler, 'argument')) {
      $date_handler = $handler;
      $args[] = 'full_calendar_browse';
    }
    else {
      $args[] = $view->args[$position];
    }
    $position++;
  }

  if ($date_handler) {
    $timestamp = strtotime($date_handler->argument);
    $separator = (strpos($date_handler->argument, '-') !== FALSE) ? '-' : '';

    // Add separator and ajax for date argument.
    $settings['args'] = implode('|', $args);
    $settings['separator'] = $separator;
    $settings['ajax'] = TRUE;

    // Settings for FullCalendar.
    $month = date('n', $timestamp);
    $year = date('Y', $timestamp);
    $settings['month'] = $month - 1;
    $settings['year'] = $year;
  }

  return $settings;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Since we force the query to be distinct, reflect that in the UI.
 */
function fullcalendar_form_views_ui_edit_display_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->display_handler->get_option('style_plugin') != 'fullcalendar') {
    return;
  }

  $form['options']['query']['options']['distinct']['#disabled'] = TRUE;
  $form['options']['query']['options']['distinct']['#description'] .= '<br><strong>' . t('FullCalendar requires that the query be distinct.') . '</strong>';
}

/**
 * Returns events for FullCalendar.
 */
function fullcalendar_results($view_name = NULL, $view_display = NULL, $args = NULL) {
  $content = NULL;

  // Bail out if no view_name or view_display is passed.
  if (empty($view_name) && empty($view_display)) {
    return;
  }

  // Get the view and check access.
  $view = views_get_view($view_name);
  if ($view && $view->access($view_display)) {

    $view->set_display($view_display);

    // Add arguments.
    if (!empty($args)) {
      $args = explode('|', $args);
      $view->set_arguments($args);
    }

    // Execute the display and render results
    // if available into $content variable.
    $view->preview($view_display);
    if (!empty($view->result)) {
      $view->fullcalendar_ajax = TRUE;
      $content = theme('fullcalendar', array('view' => $view, 'rows' => $view->result, 'options' => $view->style_options));
    }
  }

  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  print drupal_json_encode(array(
    'status' => TRUE,
    'content' => $content,
  ));

  // Let's call drupal_page_footer(), so even page cache can work.
  drupal_page_footer();

  exit();
}

/**
 * Checks if the user has access to update the given FullCalendar event.
 *
 * @param $entity
 *   The entity that will be updated.
 *
 * @return
 *   TRUE if the user is allowed to update the entity;
 *   FALSE if the user is not permitted to update the entity.
 */
function _fullcalendar_update_access($entity) {
  global $user;

  if (!empty($entity) && ((user_access('administer content')
      || user_access('update any fullcalendar event')
      || user_access('edit any ' . $entity->bundle . ' content')
      || (user_access('edit own ' . $entity->bundle . ' content') && $entity->uid == $user->uid)))) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Filters the date fields.
 *
 * @param $fields
 *   Array of possible date fields.
 *
 * @return
 *   Array of valid date fields.
 */
function fullcalendar_date_fields($fields) {
  foreach ($fields as $id => $field_name) {
    switch ($id) {
      case 'created':
      case 'changed':
      case 'access':
      case 'login':
      case 'timestamp':
      case 'gcal':
        break;
      default:
        $field = field_info_field($field_name);
        if (!in_array($field['type'], array('date', 'datestamp', 'datetime'))) {
          unset($fields[$id]);
        }
    }
  }
  return $fields;
}

/**
 * Helper function to resolve field_name and field_label.
 *
 * @param $display
 *   Object representing the View display.
 *
 * @return
 *  Array of date field labels, keyed by field_name.
 */
function _fullcalendar_parse_fields($display) {
  $field_options = array();
  foreach ($display->get_handlers('field') as $id => $field) {
    if (isset($field->definition['field_name'])) {
      $field_options[$id] = $field->definition['field_name'];
    }
    else {
      $field_options[$id] = $field->definition['title'];
    }
  }
  return array_intersect_key($display->get_field_labels(), fullcalendar_date_fields($field_options));
}

/**
 * Checks FullCalendar dependencies.
 *
 * @return
 *   Array with TRUE/FALSE for each dependency.
 *
 * @see fullcalendar_requirements()
 */
function _fullcalendar_status() {
  $status = array();
  $status['fullcalendar_plugin'] = FALSE;

  $path = fullcalendar_get_js_path();
  if (!file_exists($path)) {
    return FALSE;
  }

  if (version_compare(fullcalendar_get_version($path), FULLCALENDAR_MIN_PLUGIN_VERSION, '>=')) {
    $status['fullcalendar_plugin'] = TRUE;
  }

  return $status;
}

/**
 * Returns the version of FullCalendar plugin that is installed.
 *
 * This can be used by other modules' hook_requirements() to ensure that the
 * proper version of FullCalendar plugin is installed.
 *
 * @see version_compare()
 */
function fullcalendar_get_version($fullcalendar_path = NULL) {
  $version = &drupal_static(__FUNCTION__);

  if (empty($version)) {
    $version = 0;
    $pattern = '#FullCalendar v([0-9\.a-z]+)#';

    // No file is passed in so use the default location.
    if (is_null($fullcalendar_path)) {
      $fullcalendar_path = fullcalendar_get_js_path();
    }

    // Return the version of FullCalendar plugin.
    $fullcalendar_plugin = file_get_contents($fullcalendar_path, NULL, NULL, 0, 40);
    if (preg_match($pattern, $fullcalendar_plugin, $matches)) {
      $version = $matches[1];
    }
  }

  return $version;
}

/**
 * Returns the path to the FullCalendar plugin.
 */
function fullcalendar_get_js_path() {
  $fullcalendar_file = array('none' => 'fullcalendar.js', 'min' => 'fullcalendar.min.js');
  return variable_get('fullcalendar_path', FULLCALENDAR_PATH) . '/' . $fullcalendar_file[variable_get('fullcalendar_compression_type', 'min')];
}
